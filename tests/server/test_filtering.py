import numpy as np
from torch.testing import assert_allclose
import pytest

from survos2.server.filtering import gaussian_blur, simple_invert
from survos2.server.config import cfg
from survos2.server.filtering import (
    gaussian_blur,
    simple_invert,
    laplacian,
    spatial_gradient_3d,
)
from survos2.improc.features import tvdenoising3d
from survos2.server.features import generate_features
from skimage.data import binary_blobs


def test_feature_generation():

    img_vol = np.zeros((5, 5, 5))
    img_vol[2, 2, 2] = 1.0

    filter_cfg = {
        "filter1": {
            "plugin": "features",
            "feature": "gaussian",
            "params": {"sigma": 1},
        },
        "filter2": {
            "plugin": "features",
            "feature": "gaussian",
            "params": {"sigma": 2},
        },
        "filter3": {
            "plugin": "features",
            "feature": "tvdenoising3d",
            "params": {"lamda": 3.0},
        },
        "filter4": {
            "plugin": "features",
            "feature": "laplacian",
            "params": {"kernel_size": 3},
        },
        "filter5": {
            "plugin": "features",
            "feature": "gradient",
            "params": {"sigma": 3},
        },
    }

    feature_params = [
        [gaussian_blur, filter_cfg["filter1"]["params"]],
        [gaussian_blur, filter_cfg["filter2"]["params"]],
        [laplacian, filter_cfg["filter4"]["params"]],
    ]

    num_feature_params = len(feature_params)

    roi_crop = [0, img_vol.shape[0], 0, img_vol.shape[1], 0, img_vol.shape[2]]

    sr_feat = generate_features(img_vol, feature_params, roi_crop, 1.0)

    num_generated_features = len(sr_feat.filtered_layers)

    assert num_feature_params == num_generated_features

    generated_feature_shapes = [layer.shape for layer in sr_feat.filtered_layers]

    assert generated_feature_shapes == [
        img_vol.shape for i in range(num_generated_features)
    ]

    gaussian_blur_1_precalc = np.array(
        [
            [
                [0.0, 0.05852601, 0.09003059, 0.05852601, 0.0],
                [0.058526, 0.18242553, 0.24912073, 0.18242553, 0.058526],
                [0.09003057, 0.24912073, 0.3347591, 0.24912073, 0.09003057],
                [0.058526, 0.18242553, 0.24912073, 0.18242553, 0.058526],
                [0.0, 0.05852601, 0.09003059, 0.05852601, 0.0],
            ],
            [
                [0.05852601, 0.18242553, 0.24912073, 0.18242553, 0.05852601],
                [0.18242553, 0.44472083, 0.5859146, 0.44472083, 0.18242553],
                [0.24912073, 0.5859146, 0.76721096, 0.5859146, 0.24912073],
                [0.18242553, 0.44472083, 0.5859146, 0.44472083, 0.18242553],
                [0.05852601, 0.18242553, 0.24912073, 0.18242553, 0.05852601],
            ],
            [
                [0.09003059, 0.24912073, 0.3347591, 0.24912073, 0.09003059],
                [0.24912073, 0.5859146, 0.76721084, 0.5859146, 0.24912073],
                [0.3347591, 0.76721096, 1.0, 0.76721096, 0.3347591],
                [0.24912073, 0.5859146, 0.76721084, 0.5859146, 0.24912073],
                [0.09003059, 0.24912073, 0.3347591, 0.24912073, 0.09003059],
            ],
            [
                [0.05852601, 0.18242553, 0.24912073, 0.18242553, 0.05852601],
                [0.18242553, 0.44472083, 0.5859146, 0.44472083, 0.18242553],
                [0.24912073, 0.5859146, 0.76721096, 0.5859146, 0.24912073],
                [0.18242553, 0.44472083, 0.5859146, 0.44472083, 0.18242553],
                [0.05852601, 0.18242553, 0.24912073, 0.18242553, 0.05852601],
            ],
            [
                [0.0, 0.05852601, 0.09003059, 0.05852601, 0.0],
                [0.058526, 0.18242553, 0.24912073, 0.18242553, 0.058526],
                [0.09003057, 0.24912073, 0.3347591, 0.24912073, 0.09003057],
                [0.058526, 0.18242553, 0.24912073, 0.18242553, 0.058526],
                [0.0, 0.05852601, 0.09003059, 0.05852601, 0.0],
            ],
        ],
        dtype=np.float32,
    )

    gaussian_blur_2_precalc = np.array(
        [
            [
                [0.0, 0.18462871, 0.25427523, 0.18462871, 0.0],
                [0.18462871, 0.40733334, 0.49134317, 0.40733334, 0.18462871],
                [0.25427523, 0.49134317, 0.5807712, 0.49134317, 0.25427523],
                [0.18462871, 0.40733334, 0.49134317, 0.40733334, 0.18462871],
                [0.0, 0.18462871, 0.25427523, 0.18462871, 0.0],
            ],
            [
                [0.18462871, 0.40733352, 0.49134332, 0.40733352, 0.18462871],
                [0.40733334, 0.6759666, 0.7773018, 0.6759666, 0.40733334],
                [0.49134317, 0.7773018, 0.8851725, 0.7773018, 0.49134317],
                [0.40733334, 0.6759666, 0.7773018, 0.6759666, 0.40733334],
                [0.18462871, 0.40733352, 0.49134332, 0.40733352, 0.18462871],
            ],
            [
                [0.25427523, 0.49134332, 0.580771, 0.49134332, 0.25427523],
                [0.49134317, 0.7773018, 0.8851723, 0.7773018, 0.49134317],
                [0.5807712, 0.8851725, 1.0, 0.8851725, 0.5807712],
                [0.49134317, 0.7773018, 0.8851723, 0.7773018, 0.49134317],
                [0.25427523, 0.49134332, 0.580771, 0.49134332, 0.25427523],
            ],
            [
                [0.18462871, 0.40733352, 0.49134332, 0.40733352, 0.18462871],
                [0.40733334, 0.6759666, 0.7773018, 0.6759666, 0.40733334],
                [0.49134317, 0.7773018, 0.8851725, 0.7773018, 0.49134317],
                [0.40733334, 0.6759666, 0.7773018, 0.6759666, 0.40733334],
                [0.18462871, 0.40733352, 0.49134332, 0.40733352, 0.18462871],
            ],
            [
                [0.0, 0.18462871, 0.25427523, 0.18462871, 0.0],
                [0.18462871, 0.40733334, 0.49134317, 0.40733334, 0.18462871],
                [0.25427523, 0.49134317, 0.5807712, 0.49134317, 0.25427523],
                [0.18462871, 0.40733334, 0.49134317, 0.40733334, 0.18462871],
                [0.0, 0.18462871, 0.25427523, 0.18462871, 0.0],
            ],
        ],
        dtype=np.float32,
    )

    laplacian_precalc = np.array(
        [
            [
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
            ],
            [
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 1.0, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 1.0, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 1.0, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
            ],
            [
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 1.0, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 0.0, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 1.0, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
            ],
            [
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 1.0, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 1.0, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 1.0, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
            ],
            [
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
                [0.8888889, 0.8888889, 0.8888889, 0.8888889, 0.8888889],
            ],
        ],
        dtype=np.float32,
    )

    assert_allclose(sr_feat.filtered_layers[0], gaussian_blur_1_precalc)
    assert_allclose(sr_feat.filtered_layers[1], gaussian_blur_2_precalc)
    assert_allclose(sr_feat.filtered_layers[2], laplacian_precalc)


if __name__ == "__main__":
    pytest.main()
